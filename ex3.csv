using System;
using System.Collections.Generic;

public interface IMediator
{
    void SendMessage(string message, User user);
    void AddUser(User user);
    void RemoveUser(User user);
}

public class ChatRoom : IMediator
{
    private List<User> _users = new List<User>();

    public void AddUser(User user)
    {
        _users.Add(user);
        Console.WriteLine($"{user.Name} has joined the chat.");
        NotifyUsers($"{user.Name} has joined the chat.", user);
    }

    public void RemoveUser(User user)
    {
        _users.Remove(user);
        Console.WriteLine($"{user.Name} has left the chat.");
        NotifyUsers($"{user.Name} has left the chat.", user);
    }

    public void SendMessage(string message, User sender)
    {
        foreach (var user in _users)
        {
            if (user != sender)
            {
                user.Receive(message, sender.Name);
            }
        }
    }

    public void SendPrivateMessage(string message, User sender, string receiverName)
    {
        User receiver = _users.Find(u => u.Name == receiverName);
        if (receiver != null)
        {
            receiver.Receive($"Private message: {message}", sender.Name);
        }
        else
        {
            Console.WriteLine($"{sender.Name}, user {receiverName} not found in the chat.");
        }
    }

    private void NotifyUsers(string message, User excludingUser = null)
    {
        foreach (var user in _users)
        {
            if (user != excludingUser)
            {
                user.Receive(message, "ChatRoom");
            }
        }
    }
}

public abstract class User
{
    protected IMediator mediator;
    public string Name { get; private set; }

    public User(IMediator mediator, string name)
    {
        this.mediator = mediator;
        this.Name = name;
    }

    public abstract void Send(string message);
    public abstract void Receive(string message, string sender);
}

public class BasicUser : User
{
    public BasicUser(IMediator mediator, string name) : base(mediator, name) { }

    public override void Send(string message)
    {
        Console.WriteLine($"{Name} sends: {message}");
        mediator.SendMessage(message, this);
    }

    public override void Receive(string message, string sender)
    {
        Console.WriteLine($"{Name} received a message from {sender}: {message}");
    }

    public void SendPrivate(string message, string receiverName)
    {
        Console.WriteLine($"{Name} sends a private message to {receiverName}: {message}");
        ((ChatRoom)mediator).SendPrivateMessage(message, this, receiverName);
    }
}

class Program
{
    static void Main(string[] args)
    {
        IMediator chatRoom = new ChatRoom();

        User user1 = new BasicUser(chatRoom, "Alice");
        User user2 = new BasicUser(chatRoom, "Bob");
        User user3 = new BasicUser(chatRoom, "Charlie");

        chatRoom.AddUser(user1);
        chatRoom.AddUser(user2);
        chatRoom.AddUser(user3);

        user1.Send("Hello everyone!");
        user2.Send("Hi Alice!");
        
        ((BasicUser)user3).SendPrivate("Hello Bob, how are you?", "Bob");

        chatRoom.RemoveUser(user1);
        user2.Send("Goodbye Alice.");
    }
}
